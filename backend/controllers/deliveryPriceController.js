const DeliveryPrice = require("../models/DeliveryPrice");
const Motoboy = require("../models/Motoboy");
const fullScreenNotificationService = require("../services/fullScreenNotificationService");

// Fun√ß√£o para enviar notifica√ß√µes para todos os motoboys
const notifyAllMotoboysAboutPriceChange = async (
  changeType,
  isActive,
  priceValue
) => {
  try {
    // Buscar todos os motoboys aprovados
    const motoboys = await Motoboy.find({
      isApproved: true,
      $or: [
        { fcmToken: { $exists: true, $ne: null } },
        { firebaseUid: { $exists: true, $ne: null } },
      ],
    });

    if (motoboys.length === 0) {
      console.log("Nenhum motoboy encontrado para notificar");
      return;
    }

    let title, message, emoji;

    if (changeType === "rain") {
      if (isActive) {
        title = "üåßÔ∏è MODO CHUVA ATIVADO!";
        message = `Agora voc√™ ganha R$ ${priceValue.toFixed(
          2
        )} a mais por entrega! üí∞`;
        emoji = "üåßÔ∏èüí∞";
      } else {
        title = "‚òÄÔ∏è Modo Chuva Desativado";
        message = "O b√¥nus de chuva n√£o est√° mais ativo";
        emoji = "‚òÄÔ∏è";
      }
    } else if (changeType === "highDemand") {
      if (isActive) {
        title = "üî• ALTA DEMANDA ATIVADA!";
        message = `Pre√ßo fixo aumentado para R$ ${priceValue.toFixed(
          2
        )}! Aproveite! üöÄ`;
        emoji = "üî•üöÄ";
      } else {
        title = "üìâ Alta Demanda Desativada";
        message = "O pre√ßo voltou ao normal";
        emoji = "üìâ";
      }
    }

    console.log(
      `üì¢ Enviando notifica√ß√£o para ${motoboys.length} motoboys: ${title}`
    );

    // Enviar notifica√ß√£o para cada motoboy
    const notifications = motoboys.map(async (motoboy) => {
      try {
        // Usando o servi√ßo de notifica√ß√£o fullscreen existente
        await fullScreenNotificationService.createFullScreenNotification({
          recipientId: motoboy._id,
          recipientType: "motoboy",
          title: title,
          message: message,
          callType: "price_update",
          data: {
            changeType,
            isActive,
            priceValue,
            emoji,
            priority: "high",
            showAsPopup: true,
          },
          timeoutSeconds: 15, // Notifica√ß√£o mais curta
        });

        console.log(`‚úÖ Notifica√ß√£o enviada para ${motoboy.name}`);
      } catch (error) {
        console.error(`‚ùå Erro ao notificar ${motoboy.name}:`, error.message);
      }
    });

    await Promise.allSettled(notifications);
    console.log(
      `üì± Processo de notifica√ß√£o conclu√≠do para ${motoboys.length} motoboys`
    );
  } catch (error) {
    console.error(
      "‚ùå Erro ao notificar motoboys sobre mudan√ßa de pre√ßo:",
      error
    );
  }
};

// GET - Obter configura√ß√µes de precifica√ß√£o
const getDeliveryPrice = async (req, res) => {
  try {
    // Busca a configura√ß√£o mais recente (deveria ter apenas uma)
    let deliveryPrice = await DeliveryPrice.findOne().sort({ updatedAt: -1 });

    // Se n√£o existir nenhuma configura√ß√£o, cria uma padr√£o
    if (!deliveryPrice) {
      deliveryPrice = new DeliveryPrice({
        fixedKm: 0,
        fixedPriceHigh: 0,
        fixedPrice: 0,
        bonusKm: 0,
        priceRain: 0,
        isRain: false,
        isHighDemand: false,
        driveBack: 0,
      });
      await deliveryPrice.save();
    }

    res.status(200).json(deliveryPrice);
  } catch (error) {
    console.error("Erro ao buscar configura√ß√£o de pre√ßos:", error);
    res.status(500).json({
      message: "Erro interno do servidor",
      error: error.message,
    });
  }
};

// PUT - Atualizar configura√ß√µes de precifica√ß√£o
const updateDeliveryPrice = async (req, res) => {
  try {
    const {
      fixedKm,
      fixedPriceHigh,
      fixedPrice,
      bonusKm,
      priceRain,
      isRain,
      isHighDemand,
      driveBack,
    } = req.body;

    // Valida√ß√£o dos dados
    const numericFields = {
      fixedKm,
      fixedPriceHigh,
      fixedPrice,
      bonusKm,
      priceRain,
      driveBack,
    };
    for (const [field, value] of Object.entries(numericFields)) {
      if (value !== undefined && (isNaN(value) || value < 0)) {
        return res.status(400).json({
          message: `O campo ${field} deve ser um n√∫mero positivo`,
        });
      }
    }

    if (isRain !== undefined && typeof isRain !== "boolean") {
      return res.status(400).json({
        message: "O campo isRain deve ser um valor booleano",
      });
    }

    if (isHighDemand !== undefined && typeof isHighDemand !== "boolean") {
      return res.status(400).json({
        message: "O campo isHighDemand deve ser um valor booleano",
      });
    }

    // Busca a configura√ß√£o existente
    let deliveryPrice = await DeliveryPrice.findOne().sort({ updatedAt: -1 });

    // Vari√°veis para detectar mudan√ßas que precisam de notifica√ß√£o
    let rainChanged = false;
    let highDemandChanged = false;
    let oldRainStatus = false;
    let oldHighDemandStatus = false;

    if (!deliveryPrice) {
      // Se n√£o existe, cria uma nova
      deliveryPrice = new DeliveryPrice({
        fixedKm: fixedKm || 0,
        fixedPriceHigh: fixedPriceHigh || 0,
        fixedPrice: fixedPrice || 0,
        bonusKm: bonusKm || 0,
        priceRain: priceRain || 0,
        isRain: isRain || false,
        isHighDemand: isHighDemand || false,
        driveBack: driveBack || 0,
      });

      // Se est√° criando pela primeira vez e ativando modo chuva/alta demanda
      if (isRain === true) rainChanged = true;
      if (isHighDemand === true) highDemandChanged = true;
    } else {
      // Detectar mudan√ßas nos campos que precisam de notifica√ß√£o
      oldRainStatus = deliveryPrice.isRain;
      oldHighDemandStatus = deliveryPrice.isHighDemand;

      if (isRain !== undefined && isRain !== oldRainStatus) {
        rainChanged = true;
      }
      if (isHighDemand !== undefined && isHighDemand !== oldHighDemandStatus) {
        highDemandChanged = true;
      }

      // Atualiza os campos fornecidos
      if (fixedKm !== undefined) deliveryPrice.fixedKm = fixedKm;
      if (fixedPriceHigh !== undefined)
        deliveryPrice.fixedPriceHigh = fixedPriceHigh;
      if (fixedPrice !== undefined) deliveryPrice.fixedPrice = fixedPrice;
      if (bonusKm !== undefined) deliveryPrice.bonusKm = bonusKm;
      if (priceRain !== undefined) deliveryPrice.priceRain = priceRain;
      if (isRain !== undefined) deliveryPrice.isRain = isRain;
      if (isHighDemand !== undefined) deliveryPrice.isHighDemand = isHighDemand;
      if (driveBack !== undefined) deliveryPrice.driveBack = driveBack;
    }

    await deliveryPrice.save();

    // Enviar notifica√ß√µes se houve mudan√ßas relevantes
    if (rainChanged) {
      console.log(
        `üåßÔ∏è Modo chuva ${
          deliveryPrice.isRain ? "ATIVADO" : "DESATIVADO"
        } - Notificando motoboys...`
      );
      // N√£o aguardar a notifica√ß√£o para n√£o bloquear a resposta
      notifyAllMotoboysAboutPriceChange(
        "rain",
        deliveryPrice.isRain,
        deliveryPrice.priceRain
      ).catch((error) =>
        console.error("Erro ao notificar sobre chuva:", error)
      );
    }

    if (highDemandChanged) {
      console.log(
        `üî• Alta demanda ${
          deliveryPrice.isHighDemand ? "ATIVADA" : "DESATIVADA"
        } - Notificando motoboys...`
      );
      // N√£o aguardar a notifica√ß√£o para n√£o bloquear a resposta
      notifyAllMotoboysAboutPriceChange(
        "highDemand",
        deliveryPrice.isHighDemand,
        deliveryPrice.fixedPriceHigh
      ).catch((error) =>
        console.error("Erro ao notificar sobre alta demanda:", error)
      );
    }

    res.status(200).json({
      message: "Configura√ß√µes de precifica√ß√£o atualizadas com sucesso",
      data: deliveryPrice,
    });
  } catch (error) {
    console.error("Erro ao atualizar configura√ß√£o de pre√ßos:", error);
    res.status(500).json({
      message: "Erro interno do servidor",
      error: error.message,
    });
  }
};

// POST - Criar nova configura√ß√£o de precifica√ß√£o (sobrescreve a existente)
const createDeliveryPrice = async (req, res) => {
  try {
    const {
      fixedKm,
      fixedPriceHigh,
      fixedPrice,
      bonusKm,
      priceRain,
      isRain,
      isHighDemand,
      driveBack,
    } = req.body;

    // Valida√ß√£o dos dados obrigat√≥rios (se necess√°rio)
    const numericFields = {
      fixedKm,
      fixedPriceHigh,
      fixedPrice,
      bonusKm,
      priceRain,
      driveBack,
    };
    for (const [field, value] of Object.entries(numericFields)) {
      if (value !== undefined && (isNaN(value) || value < 0)) {
        return res.status(400).json({
          message: `O campo ${field} deve ser um n√∫mero positivo`,
        });
      }
    }

    // Remove a configura√ß√£o existente (mant√©m apenas uma)
    await DeliveryPrice.deleteMany({});

    // Cria a nova configura√ß√£o
    const deliveryPrice = new DeliveryPrice({
      fixedKm: fixedKm || 0,
      fixedPriceHigh: fixedPriceHigh || 0,
      fixedPrice: fixedPrice || 0,
      bonusKm: bonusKm || 0,
      priceRain: priceRain || 0,
      isRain: isRain || false,
      isHighDemand: isHighDemand || false,
      driveBack: driveBack || 0,
    });

    await deliveryPrice.save();

    res.status(201).json({
      message: "Configura√ß√£o de precifica√ß√£o criada com sucesso",
      data: deliveryPrice,
    });
  } catch (error) {
    console.error("Erro ao criar configura√ß√£o de pre√ßos:", error);
    res.status(500).json({
      message: "Erro interno do servidor",
      error: error.message,
    });
  }
};

// DELETE - Resetar configura√ß√µes para valores padr√£o
const resetDeliveryPrice = async (req, res) => {
  try {
    // Remove todas as configura√ß√µes existentes
    await DeliveryPrice.deleteMany({});

    // Cria uma nova configura√ß√£o com valores padr√£o
    const deliveryPrice = new DeliveryPrice({
      fixedKm: 0,
      fixedPriceHigh: 0,
      fixedPrice: 0,
      bonusKm: 0,
      priceRain: 0,
      isRain: false,
      isHighDemand: false,
      driveBack: 0,
    });

    await deliveryPrice.save();

    res.status(200).json({
      message: "Configura√ß√µes de precifica√ß√£o resetadas para valores padr√£o",
      data: deliveryPrice,
    });
  } catch (error) {
    console.error("Erro ao resetar configura√ß√£o de pre√ßos:", error);
    res.status(500).json({
      message: "Erro interno do servidor",
      error: error.message,
    });
  }
};

module.exports = {
  getDeliveryPrice,
  updateDeliveryPrice,
  createDeliveryPrice,
  resetDeliveryPrice,
};
